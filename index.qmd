---
title: "Collaboration, Sharing & Version Control"
author: "Nils Ratnaweera"
date: 22/04/2024
format: 
  revealjs:
    theme: dark
    logo: images/zhaw_sw_neg.png
    smaller: true
    css: style.css
    navigation-mode: vertical
lang: de-CH
bibliography: literatur.bib
---

# Heute

## Ablauf

1. Plaintext, Markup and Markdown
2. Pandoc
3. Quarto
4. HTML and the Web
5. Quarto Advanced
6. Quarto Professional
7. (Versioncontrol with Git und GitHub)

## Ziele

::: {.incremental}
- Know the advantages of *simple text documents    
- Know the basics of Markdown
- Know the basics of Quarto
- Quarto Advanced Features
- Quarto Professional Features
- (Collaboration with Git and GitHub)
:::


## Origins

![](images/knuth.jpg)

:::{.notes}

Literate programming is a programming paradigm introduced in 1984

:::

## Origins

::::{.columns}

::: {.column width="40%"}
![](images/knuthweb.png)
:::

::: {.column width="60%"}

<div class="r-stack">
<div class="fragment fade-in fade-out">
> I’ve stumbled across a method of composing programs that excites me very much.
>
> *In fact, my enthusiasm is so great that I must warn the reader to discount much of what I shall say as the ravings of a fanatic who thinks he has just seen a great light.*
</div>

<div class="fragment fade-in">
> I chose the name WEB partly because it was one of the few three-letter words of English that hadn’t already been applied to computers.
</div>

</div>
:::

::::

# Plaintext, Markup and Markdown

## Less is more

Advantages of plain text files    

::: {.incremental}
1. platform independence    
2. small file size
3. easy handling
4. version control
5. long-term compatibility
6. searchability
7. easy integration
:::

::: {.notes}
1. platform independence: text files are easily accessible on all operating systems (Windows, macOS, Linux).    
2. small file size: text files are usually smaller than their formatted counterparts, which saves disk space.
3. ease of use: text files can be easily edited in any text editor, without special software.
4. version control: Simple text files facilitate the use of version control systems such as Git.
5. long-term compatibility: text files are more likely to be supported by software in the future.
6. searchability: text files enable efficient searches for information.
7. ease of integration: simple text files can be easily integrated into various applications and workflows.
:::

## What is a markup language?    

- Markup language for structuring texts
- Machine readable (use of tags / symbols)
- Clear separation of content and formatting
- *What you see is what you mean* (WYSIWYM)

::: {.notes}
Focus on what we want to write, not what it looks like. :::

## Was für Markup Sprachen gibt es?

| Langauge | Example                |
|----------|------------------------|
| HTML     | `<b>Hello World</b>`   |
| LaTeX    | `\textbf{Hello World}` |
| Markdown | `**Hello World**`      |

## What is Markdown?

- Lightweight markup language for easy text formatting
- Easy to learn 
- Machine readable *and* human readable
- **Frontend** for Latex / HTML

## Markdown Syntax

```
# A story of a fox

The *quick* brown fox **jumps** over the lazy [dog](https://en.wikipedia.org/wiki/Dog).

![](images/fox-over-dog.jpg)
```

. . . 

<div style="height: 100px"></div>

### A story of a fox

The *quick* brown fox **jumps** over the lazy [dog](https://en.wikipedia.org/wiki/Dog).

![](images/fox-over-dog.jpg){width="400px"}

::: {.notes}
- [Markdown Basics](https://quarto.org/docs/authoring/markdown-basics.html)
- [Abbildungen](https://quarto.org/docs/authoring/figures.html)
- [Tabellen](https://quarto.org/docs/authoring/tables.html)
:::


## Markdown Exercise 1 🛠️

:::{.callout-warning}

## Todo

Write this exercise. Maybe provide an example text from *a song of ice and fire*?

:::

# Quarto

## What is Quarto?

:::{.incremental}
- An open source *cli* tool
- Based on Markdown and Pandoc
  ![](images/rstudio-qmd-how-it-works2.png)
- Extends the standard Markdown language with useful elements (e.g. callout blocks)
- Integrates the integration of code (R, Python, Julia, SQL...)
- Provides appealing *out-of-the-box* templates
:::

## Output formats

- `html`: Books, Slides, Blogs...
- `pdf`: Books, Slides
- `epub`: Books
- `word`: Books
- `pptx`: Slides

## Quarto Exercise 1 🛠️

:::{.callout-note}
## TODO

Adapt this exercise (step 2 not current)
:::

:::{.incremental}
1. install quarto [quarto.org](https://quarto.org)
2. open a terminal in your R-Project folder
3. convert the markdown file to html with the following command: 

   ```bash
   quarto render markdown.md
   ```
:::

<div style="height: 40px"></div>

:::{.incremental}
- `render` is a function of the program `quarto`
- `markdown.md` is a positional argument
- The output is (unless otherwise defined) an HTML file
:::

## Quarto Exercise 2 🛠️

:::{.incremental}
- Interactive development with `render`: 🫤
- `quarto preview` enables a live preview (UX: 🥰)
  ```bash
  # quarto render markdown.md
  quarto preview markdown.md
  ```
- Try it!
:::


## Quarto Exercise 2 3 🛠️

- Create a pdf file from your Markdown
- Install `tinytex` for this (if necessary)

# HTML and the Web

## HTML vs PDF

- The current *de facto* standard for text documents: PDF
- PDFs have advantages, but also many limitations


:::: {.columns}

::: {.column .fragment width="40%"}
**Vorteile**

- ✅ Formatting (printing)
- ✅ *single-file*
- ✅ Can be used offline

:::

::: {.column .fragment width="60%"}
**Nachteile**

- 🚫 Public perception
- 🚫 responsive for various devices (BYOD)
- 🚫 Interactive elements
- 🚫 Translatability (German ↔ English)
- 🚫 Accessibility features (e.g. screen readers)
:::
::::

## Publishing HTML Files

:::{.incremental}
- HTML files can be saved / shared offline <span class="fragment">→ unusual and unfamiliar</span>
- More useful / common: Create hosted websites
- Many possibilities:
  - GitHub Pages
  - Netlify
  - QuartoPub
:::

## Exercise Publish HTML 1 🛠️

### Netlify Drop

:::{.incremental}
1. open the website [app.netlify.com/drop](https://app.netlify.com/drop)(no login required)
2. drag-and-drop *the folder* with the HTML output file from the *exercise Quarto
3. wait until the upload is complete and <span id="complete">Complete</span> is displayed in the *Deploy log*  
4. click on <span id="open">Open production deploy</span>
5. the website is located at [something.netlify.app/*filename.html*](something.netlify.app)
   - *filename.html* must still be added!
   - this can be avoided if *index.html* is used instead of filename.html
:::

## Exercise Publish HTML 1 🛠️

### Netlify Drop

This method is very simple, but:

:::{.incremental}
- Without login, publication is limited in time <span class="fragment hl">→ with login unlimited</span>  
- Requires drag-and-drop <span class="fragment hl">→ command line `quarto publish netlify` </span>
- URL is not very appealing <span class="fragment hl">→ With `CNAME` *own* domain (see [https://www.ratnaweera.xyz/](ratnaweera.xyz))</span>
:::

:::{.notes}
- ZHAW domain *not yet* possible
- Take home message: HTMLs can be published via conventional hosting platforms
:::

## Exercise Publish HTML 2 🛠️

:::{.callout-important}

## TODO

GitHub Pages
:::


# Quarto Advanced

## YAML Header


:::{.incremental}
- YAML: *YAML Ain't a Markup Language*
- A machine- *and human-readable* way of storing structured data
- An example:  
  ```yaml
  title: A song of ice and fire
  author: George R. R. Martin
  ```
- In Quarto: Record metadata (e.g. title, author and date)
- Is inserted at the beginning of the document and enclosed with `---`
:::

## Exercise YAML Header 1 🛠️

- Add metadata to your Markdown file using YAML headers

```yaml
---
title: A song of ice and fire
author: George R. R. Martin
---
```

## Exercise YAML Header 2 🛠️


- Add metadata to your Markdown file using YAML headers


```{.default code-line-numbers="5-9"}
---
format: pdf   # default output: pdf
lang: de-CH   # Sprache: Deutsch
---
```


## Exercise YAML Header 3 🛠️

```yaml
---
format: 
  pdf:            # pdf specific optons:
    toc: true     # - should a Table of Contents be published?
    toc-depth: 1  # - How many layers should be displayed in the TOC?
---
```

## Übung Querverweise 🛠️


:::{.callout-important}

- Translate the rest in english. 
- Add R Code Chunks!!
- Remove so much that the whole thing fits into two lessons

:::

- Fügt ein Querverweis auf ein Bild ein. Z.B:
- *siehe @fig-baratheon-0*
- ([quarto.org](https://quarto.org/docs/authoring/cross-references.html) → Guide → Authoring → Scholarly Writing → Cross-References)

<div >
![Das Wappen des Hauses Baratheon aus *A Song of Ice and Fire*](images/baratheon.png){#fig-baratheon-0 width="100px"}
</div>

. . . 

- Für einen Querverweis braucht das Element, auf das man verweisen möchte es eine *ID*
- Diese wird in `{}` gesetzt und beginnt mit `#`, bei Bilder folgt auf `#` ein `fig`. Z.B:

  ```markdown
  ![Das Wappen des Hauses Baratheon...](images/baratheon.png){#fig-baratheon}
  ```
- Um auf das Bild zu verweisen verwendet man `@fig-baratheon`


:::{.notes}
- `#fig` macht aus der Referenz "Abbildung"
- auf `lang` achten!
:::

## Übung Querverweise 🛠️ {#sec-uebung-quarto-featuers-2}

- Fügt ein Querverweise auf eine Kapitelmarke ein. Z.B.
- *siehe @sec-uebung-quarto-featuers-2*
- ([quarto.org](https://quarto.org/docs/authoring/cross-references.html) → Guide → Authoring → Scholarly Writing → Cross-References)

<div style="height: 100px"></div>
. . . 

- Kapitelmarken erhalten ein `{#sec-}`
- Kapitel werden (aktuell) nur mit *Nummern* referenziert
  - im YAML header: `number-sections: true`
  - Siehe <https://github.com/quarto-dev/quarto-cli/issues/1196>


## Übung Subfigures 🛠️

- In Quarto können *Figures* aus *Subfigures* bestehen
- Siehe: [quarto.org](https://quarto.org/docs/authoring/figures.html#subfigures) → Guide → Authoring → Figures → Subfigures
- Erstellt ein Subfigure Layout, ähnlich wie das folgende:

:::{#fig-houses layout-nrow="1"}

![House Baratheon](images/baratheon.png){#fig-barathon}

![House Baylish](images/baylish.png){#fig-baylish}

![House Arryn](images/arryn.png){#fig-arryn}

![House Bolton](images/bolton.png){#fig-bolton}


Eine Sammlung verschiedener Wappen aus dem Buch "*A song of Ice and Fire*", erstellt von *dezzzart* publiziert auf [deviantart.com](https://www.deviantart.com/dezzzart)
:::

## Übung Tabellen 🛠️

- Tabellen sind in Markup Sprachen etwas umständlich
- Vor allem, wenn sie häufig editiert / aktualisiert werden
  - → In diesem Fall empfiehlt sich die Verwendung von R / Python Codeblocks
- Für einfache bzw. sich nicht verändernde Tabellen ist der Markup Syntax ausreichend
- Für den Export aus Excel: [tablesgenerator.com](https://www.tablesgenerator.com/markdown_tables)
- Es gibt 3 Syntax Formen:
  - Pipe Tables
  - Grid Tables
  - HTML Tables


## Übung Tabellen 🛠️

- Sind sehr einfach im Syntax dafür etwas beschränkt in den Features
- [quarto.org](https://quarto.org/docs/authoring/tables.html) → Authoring → Tables


### Pipe Table

```markdown
| fruit  | price   |
|:-------|--------:|
| apple  |  2.05   |
| pear   |  1.37   |
| orange | 30.09   |

: Eine "pipe" Tabelle {#tbl-pipe}
```


| fruit  | price   |
|:-------|--------:|
| apple  |  2.05   |
| pear   |  1.37   |
| orange | 30.09   |

: Eine "pipe" Tabelle {#tbl-pipe}


:::{.notes}
- Die Doppelpunkte legen die ausrichtung fest (link, rechts, zentriert)
- die "|" müssen nicht aneinander ausgerichtet sein (dies dient lediglich der lesbarkeit)
:::


## Übung Tabellen 🛠️


### Grid Tables

- Haben mehr features
- sind etwas umständlicher zu schreiben
- [quarto.org](https://quarto.org/docs/authoring/tables.html) → Authoring → Tables

```markdown
+-----------+-----------+--------------------+
| Fruit     | Price     | Advantages         |
+===========+===========+====================+
| Bananas   | $1.34     | - built-in wrapper |
|           |           | - bright color     |
+-----------+-----------+--------------------+
| Oranges   | $2.10     | - cures scurvy     |
|           |           | - tasty            |
+-----------+-----------+--------------------+

: Sample grid table.
```


## Übung Tabellen 🛠️

- Fügt in eurem Bericht eine Tabelle ein
- Verwendet dazu (bei Bedarf) [tablesgenerator.com](https://www.tablesgenerator.com/markdown_tables)



## Übung Zitieren 🛠️

- Quarto erleichtet das Zitieren und Erstellen von Literaturverzeichnissen
- Die Metadaten der Literatur wird in sog. Bibtex-Keys gespeichert
- Bibtex-Keys können aus GoogleScholar usw. exportiert oder via Browseraddin generiert werden.

![](images/google-scholar-1.png)

## Übung Zitieren 🛠️

![](images/google-scholar-2.png)

## Übung Zitieren 🛠️


```{.bibtex}
@article{einstein1905,
  title={Zur Elektrodynamik bewegter Körper},
  author={Einstein, Albert},
  journal={Annalen der physik},
  volume={4},
  year={1905}
}

```

:::{.incremental}
- Dieser Bibtex-Keys werden in einem File abgespeichert, z.B `literatur.bib`
- Das Bibtex-File wird über den YAML Header ins Quartodokument eingebunden:
  ```yaml
  bibliography: literatur.bib
  ```
- Über die ID kann der Eintrag nun Zitiert werden:
- Folgender Eintrag: 
  ```{.markdown}
  @einstein1905 postulierte... 
  ```
- Wird zu: @einstein1905 postulierte... 
- Viele Formen stehen zur Verfügung. Siehe: [quarto.org](https://quarto.org/docs/authoring/footnotes-and-citations.html) → Guide → Authoring → Scholarly Writing → Citations and Footnotes
:::


## Übung Zitieren 🛠️

- Fügt eurem Dokument eine Referenz sowie ein Litearturverzeichnis hinzu



# Quato Professional

## Quarto Projects

- Von einem File auf *viele* Files

- Setup:
  - Quarto-Konfigurationsdatei: `_quarto.yaml` 
  - `index.qmd` (ohne YAML Header)
  - Optional: Weitere qmd-Files, die über `_quarto.yaml` eingebunden werden

## Quarto Projects

```{.yaml}
project: 
  type: book
  preview: 
      port: 5678
  execute-dir: project
  pre-render: pre-render.r

lang: de

format: 
  html:
    theme:
      dark: [darkly, custom-dark.scss]
      light: [flatly, custom-light.scss]
    css: 
      - custom.css
      - theme-custom.scss
      #- presenter-mode.css
    bibliography: bibliography.bib
    number-sections: false
    code-tools:
      source: false
    include-in-header:
      - script.html

execute:
  freeze: true
  error: false
  message: false
  warning: false

knitr:
  opts_chunk: 
    collapse: true
    #tidy: true
    
book:
  title: "Research Methods HS23"
  sidebar: 
    logo: images/zhaw_sw_neg.png
    collapse-level: 1
    style: floating
  reader-mode: true    
  # globbing would be cool. Wait for
  # https://github.com/quarto-dev/quarto-cli/issues/2120 or
  # https://github.com/quarto-dev/quarto-cli/issues/1917 to be resolved 

  chapters:
    - index.qmd
    - part: PrePro.qmd
      chapters:
      - prepro/Prepro1_Vorbereitung.qmd
      - --
      - prepro/Prepro1_Demo.qmd
      - prepro/Prepro1_Uebung.qmd
      - --
      - prepro/Prepro2_Demo.qmd
      - prepro/Prepro2_Uebung_A.qmd
      - prepro/Prepro2_Uebung_B.qmd
      - --
      - prepro/Prepro3_Demo.qmd
      - prepro/Prepro3_Uebung.qmd
    - part: InfoVis.qmd
      chapters:
      - infovis/Infovis1_Vorbereitung.qmd
      - --
      - infovis/Infovis1_Demo.qmd
      - infovis/Infovis1_Uebung.qmd
      - infovis/Infovis1_Script_eda.qmd
      - --
      - infovis/Infovis2_Uebung_A.qmd
      - infovis/Infovis2_Uebung_B.qmd
    - part: Stat1-4.qmd
      chapters:
      - stat1-4/Statistik1_Vorbereitung.qmd
      - --
      - stat1-4/Statistik1_Demo.qmd
      - stat1-4/Statistik1_Novanimal.qmd
      - stat1-4/Statistik1_Uebung.qmd
      - stat1-4/Statistik1_Loesung.qmd
      - --
      - stat1-4/Statistik2_Demo.qmd
      - stat1-4/Statistik2_Uebung.qmd
      - stat1-4/Statistik2_Loesung_Beispiel.qmd
      - stat1-4/Statistik2_Loesung_1.qmd
      - stat1-4/Statistik2_Loesung_2223s.qmd
      - stat1-4/Statistik2_Loesung_23n.qmd
      - --
      - stat1-4/Statistik3_Demo.qmd
      - stat1-4/Statistik3_Uebung.qmd
      - stat1-4/Statistik3_Loesung.qmd      
      - --
      - stat1-4/Statistik4_Demo.qmd
      - stat1-4/Statistik4_Uebung.qmd      
      - stat1-4/Statistik4_Loesung_1.qmd
      - stat1-4/Statistik4_Loesung_2n.qmd
      - stat1-4/Statistik4_Loesung_2s.qmd
    - part: Stat5-8.qmd
      chapters:
      - stat5-8/Statistik5_Vorbereitung.qmd
      - --
      - stat5-8/Statistik5_Demo.qmd
      - stat5-8/Statistik5_Uebung.qmd      
      - stat5-8/Statistik5_Loesung_1.qmd
      - stat5-8/Statistik5_Loesung_2.qmd
      - --
      - stat5-8/Statistik6_Demo.qmd
      - stat5-8/Statistik6_Uebung.qmd      
      - stat5-8/Statistik6_Loesung.qmd
      - --
      - stat5-8/Statistik7_Demo.qmd
      - stat5-8/Statistik7_Uebung.qmd      
      - stat5-8/Statistik7_Loesung.qmd
      - --
      - stat5-8/Statistik8_Demo.qmd
      - stat5-8/Statistik8_Uebung.qmd      
      - stat5-8/Statistik8_Loesung.qmd
    - part: StatKons.qmd
      chapters:
      - statKons/StatKons0_Vorbereitung.qmd
      - --
      - statKons/StatKons1_Demo_assoziationen.qmd
      - statKons/StatKons1_Demo_open_datasets.qmd
      #- statKons/StatKons1_Demo_suggest_datasets.qmd
      - --
      - statKons/StatKons2_Demo_PCA.qmd
      - --
      - statKons/StatKons3_Demo_LM.qmd
      - --
      - statKons/StatKons4_Demo_GLM.qmd
    - part: RaumAn.qmd
      chapters:
      - rauman/Rauman0_Vorbereitung.qmd
      - --
      - rauman/Rauman1_Uebung_A.qmd
      - rauman/Rauman1_Uebung_B.qmd
      - --
      - rauman/Rauman2_Uebung_A.qmd
      - rauman/Rauman2_Uebung_B.qmd
      - --
      - rauman/Rauman3_Uebung_A.qmd
      - rauman/Rauman3_Uebung_B.qmd
      - rauman/Rauman3_Uebung_C.qmd
      - --
      - rauman/Rauman4_Uebung_A.qmd
      - --
      - rauman/Rauman5_Uebung_A.qmd 
      - rauman/Rauman5_Uebung_B.qmd 
    - part: "Fallstudie S"
      chapters:
      - fallstudie_s/0_Vorbereitung.qmd
      - --
      - fallstudie_s/1_Einführung.qmd
      - fallstudie_s/2_Besuchermonitoring.qmd
      - --
      - fallstudie_s/3_Aufgabenstellung_WPZ.qmd
      - --
      - fallstudie_s/4_Projektierung.qmd
      - fallstudie_s/5_Datenverarbeitung.qmd
      - fallstudie_s/6_Deskriptive_Analysen.qmd
      - fallstudie_s/7_Multivariate_Modelle.qmd
    - part: "Fallstudie N"
      chapters:
      - fallstudie_n/1_Vorbemerkung.qmd
      - fallstudie_n/2_Datenverarbeitung.qmd
      - fallstudie_n/3_Berechnung_Homeranges.qmd
      - fallstudie_n/4_Multivariate_Modelle.qmd
      - fallstudie_n/5_Variablenselektion.qmd
      - fallstudie_n/6_Guete_und_Diagnostics.qmd
      #- --
      #- fallstudie_n/7_Modelle_mit_Nutzungsintensitaet.qmd
    - "References.qmd"
```

# Versionskontrolle mit Git und GitHub

## Git(Hub)

- **Git**: Verteiltes Versionskontrollsystem
- **GitHub**: Webplattform für Hosting von Git-Repositories.

:::{.notes}
- Git: für die Nachverfolgung von Änderungen im Quellcode während der Softwareentwicklung. Ermöglicht Zusammenarbeit, Verwaltung von Codeversionen und Änderungsverfolgung. Bekannt für Geschwindigkeit und Effizienz.
- GitHub: Bietet Tools für Zusammenarbeit, Codeüberprüfung und Projektverwaltung. Beliebt bei Entwicklern zur Teilung, Zusammenarbeit und Beitrag zu Open-Source-Projekten. Enthält Funktionen wie Issues und Pull Requests.
--

:::



## Git Workflow

- `Add`: Sammelt Änderungen
- `Commit`: Speichert eine Version mit Änderungen.
- `Push`: Hochladen von lokalen Commits ins Remote Repository.
- `Pull`: Abrufen und Einpflegen von Änderungen aus dem Remote Repository.
- `Pull Request`: Anfrage zur Überführung von Änderungen zwischen Branches.
- `Merge Conflict`: Problem bei der automatischen Zusammenführung von Branches.
- `Issue`: Verfolgung von Problemen, Vorschlägen oder Aufgaben in Projekten.


## Übung

:::{.incremental}
1. `Fork`t die Übungsunterlagen von [Fit-mit-Markdown](https://fit-mit-markdown.github.io/) 
2. Bearbeitet etwas im einem Dokument
3. `Commit`et und `Push`t die Änderungen
4. Erstellen Sie einen Merge Request auf GitHub
5. Verwenden Sie dazu die Hilfe von [fit-mit-markdown.github.io/](https://fit-mit-markdown.github.io/)
:::