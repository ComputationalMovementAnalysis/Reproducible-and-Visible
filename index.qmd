---
title: "Quarto Schulung"
author: "Nils Ratnaweera, Dominic L√º√∂nd"
date: 02/13/2024
format: 
  revealjs:
    theme: dark
    logo: images/zhaw_sw_neg.png
    smaller: true
    css: style.css
    navigation-mode: vertical
lang: de-CH
bibliography: literatur.bib
---

# Heute

## Ablauf

1. Markup und Markdown
2. Pandoc und Quarto
3. HTML Outputs publizieren
4. Kollaboration mit Textfiles

## Ziele

::: {.incremental}
- Vorteile *einfacher Textdokumente* kennen
- Basics von Markdown kennen
- Basics von Quarto kennen
- Kollaboration mit Git und GitHub
:::

# Plaintext, Markup und Markdown

## Weniger ist mehr

Vorteile reiner Textfiles (plain text)

::: {.incremental}
1. Plattformunabh√§ngigkeit
2. Geringe Dateigr√∂√üe
3. Einfache Handhabung
4. Versionskontrolle
5. Langfristige Kompatibilit√§t
6. Suchbarkeit
7. Leichte Integration
:::

::: {.notes}
1. Plattformunabh√§ngigkeit: Textdateien sind auf allen Betriebssystemen leicht zug√§nglich (Windows, macOS, Linux).
2. Geringe Dateigr√∂√üe: Textdateien sind in der Regel kleiner als ihre formatierten Gegenst√ºcke, was den Speicherplatz spart.
3. Einfache Handhabung: Textdateien k√∂nnen einfach in jedem Texteditor bearbeitet werden, ohne spezielle Software.
4. Versionskontrolle: Einfache Textdateien erleichtern die Verwendung von Versionskontrollsystemen wie Git.
5. Langfristige Kompatibilit√§t: Textdateien haben eine h√∂here Wahrscheinlichkeit, auch in Zukunft von Software unterst√ºtzt zu werden.
6. Suchbarkeit: Textdateien erm√∂glichen eine effiziente Suche nach Informationen.
7. Leichte Integration: Einfache Textdateien lassen sich leicht in verschiedene Anwendungen und Workflows integrieren.
:::

## Was ist eine Markup Sprache?

- Auszeichnungssprache zur Strukturierung von Texten
- Maschinenlesebar (Verwendung von Tags / Symbolen)
- Klare Trennung von Inhalt und Formatierung
- *What you see is what you mean* (WYSIWYM)

::: {.notes}
Fokus auf was wir schreiben wollen, nicht wie es aussieht. 
:::

## Was f√ºr Markup Sprachen gibt es?

| Sprache  | Beispiel               |
|----------|------------------------|
| HTML     | `<b>Fetter Text</b>`   |
| LaTeX    | `\textbf{Fetter Text}` |
| Markdown | `**Fetter Text**`      |

## Was ist Markdown?

- Leichtgewichtige Markup-Sprache f√ºr einfaches Textformatieren
- Einfach zu erlernen 
- Maschinenlesbar *und* Menschenlesbar
- **Frontend** f√ºr Latex / HTML

## Markdown Syntax

```
# A story of a fox

The *quick* brown fox **jumps** over the lazy [dog](https://en.wikipedia.org/wiki/Dog).

![](images/fox-over-dog.jpg)
```

. . . 

<div style="height: 100px"></div>

### A story of a fox

The *quick* brown fox **jumps** over the lazy [dog](https://en.wikipedia.org/wiki/Dog).

![](images/fox-over-dog.jpg){width="400px"}

::: {.notes}
- [Markdown Basics](https://quarto.org/docs/authoring/markdown-basics.html)
- [Abbildungen](https://quarto.org/docs/authoring/figures.html)
- [Tabellen](https://quarto.org/docs/authoring/tables.html)
:::

## Texteditor

Ein guter Texteditor ist wichtig!! Empfehlungen: 

:::{.incremental}
- VSCode: [code.visualstudio.com](https://code.visualstudio.com/) <span class="fragment"> ‚Üê Quarto Extension installieren!</span>
- RStudio: [posit.co/download/rstudio-desktop/](https://posit.co/download/rstudio-desktop/)
- (Pulsar: [pulsar-edit.dev](https://pulsar-edit.dev/)) <span class="fragment"> ‚Üê Keine Eigenen Erfahrungen </span>
:::


## √úbung Markdown üõ†Ô∏è

- Konvertiere deinen mitgebrachten Text in Markdown.
- Falls du keinen eigenen Text mitbebracht hast, nimm folgenden: [bit.ly/42vBKuu](https://bit.ly/42vBKuu)

:::{.notes}
- Bei gr√∂sseren Texten nur die ersten paar Abs√§tze verwenden
- Keine geheimen Texte! 
- Falls sie Geheim sind, ggf. mit ein paar Search-and-replace operationen den Inhalt unkenntlich machen
:::

# Pandoc

## Was ist Pandoc?


:::{.incremental}
- Open-Source-Tool zur Konvertierung von Markup-Sprachen
- Kein grafisches Userinterface (GUI), wird √ºber den Terminal bedient (cli-tool)
- Vielf√§ltige Ein- und Ausgabeformate 
:::

. . .

> If you need to convert files from one markup format into another, pandoc is your *swiss-army knife*. Pandoc can convert between the following formats

. . . 

![](images/pandoc.png)

. . . 

- Input: docx, odt, epub, html, markdown, latex, rtf, typst, wiki
- Output: (Inputs plus:) pdf

## √úbung Pandoc 1 üõ†Ô∏è

:::{.incremental}
1. Installiert Pandoc von [pandoc.org](https://pandoc.org/installing.html) (MSI installer).
2. √ñffnet ein Terminal *im Folder, wo ihr das Markdown File erstellt habt*
3. Konvertiert das eben erstellte Markdown File in html mit folgendem Command: 

   ```bash
   pandoc markdown.md 
   ```
:::

:::{.incremental}
- Der Befehl `pandoc` ruft das Commandline Tool *pandoc* auf
- Das Argument `markdown.md`:
  - Ist ein sogenanntes Positionalargument (engl: *positional argument*)
  - Gilt als Input File
- Die Markup Sprache des Input Files wird von der Dateierweiterung inferiert (`.md` = Markdown)
- Da wir kein Output-Format definiert haben, wird standartm√§ssig `html` herausgegeben
 
:::

:::{.notes}
- Wenn nur f√ºr den eigenen Nutzer interim admin nicht n√∂tig
- Um ein PDF zu erstellen m√ºsste eine zus√§tzliche Komponente installiert werden
- Da wir kein Output-File definiert haben, wird der Output nur im Terminal dargestellt
:::

## √úbung Pandoc 2 üõ†Ô∏è

```bash
# pandoc markdown.md 

pandoc -o output.html markdown.md 
```

<div style="height: 50px"></div>

:::{.incremental}
- `-o output.html`: 
  - ist ein *named argument*
  - definiert das Output File
- Die Markup Sprache des Output files wird von der Dateierweiterung inferiert (`.html`)
- Betrachtet das html Files sowohl im Texteditor wie auch im Browser
:::


## √úbung Pandoc 3 üõ†Ô∏è

Konvertiert euer mitgebrachtes docx File

- 1x in Markdown (Betrachten im Texteditor)
- 1x in html (Betrachten im Texteditor und im Browser)




## Terminal und cli-Programme

:::{.incremental}
- Die Verwendung von Commandline-Programmen (cli) ist eine wichtige und n√ºtzliche F√§higkeit
- cli Tools verf√ºgen meist √ºber eine eingebaute Hilfestellung (`-h` / `--help`)

  ```bash
  pandoc -h
  pandoc --help
  ```

  <div style="height: 20px"></div>
  ```
  pandoc [OPTIONS] [FILES]
    -f FORMAT, -r FORMAT  --from=FORMAT, --read=FORMAT                          
    -t FORMAT, -w FORMAT  --to=FORMAT, --write=FORMAT                           
    -o FILE               --output=FILE                                         
                          --data-dir=DIRECTORY                                  
    -M KEY[:VALUE]        --metadata=KEY[:VALUE]                                
                          --metadata-file=FILE                                  
    -d FILE               --defaults=FILE                                       
                          --file-scope[=true|false]                             
                          --sandbox[=true|false]                                
    -s[true|false]        --standalone[=true|false]                             
                          --template=FILE          
  ...
  ```
- die Hilfestellungen sind etwas gew√∂hnungsbed√ºrftig, daf√ºr aber umfangreich
:::

:::{.notes}
- Kurze Form `-h` und lange Form `--help`
:::

## Terminal und cli-Programme

Der Umgang mit dem Terminal ist eine wichtige und n√ºtzliche F√§higkeit.

:::{.incremental}

- mit `cd` kann man *in Folders hinein* navigieren (`cd Documents`)
- mit `cd ..` kann man *aus Folders hinaus* navigieren
- das aktuelle Verzeichnis anzeigen lassen
  - Windows: `echo %cd%`
  - Linux / Mac: `pwd`
- mit `mkdir` kann man ein Verzeichnis erstellen (`mkdir verzeichnis`)
:::

# Quarto

## Was ist Quarto?

:::{.incremental}
- Ebenfalls ein Open-Source *cli* tool
- Baut auf Markdown und Pandoc auf
  ![](images/rstudio-qmd-how-it-works2.png)
- Erweitert die standart Markdown-Sprache mit n√ºtzlichen Elementen (z.B. Callout Blocks)
- Integriert die Integration von Code (R, Python, Julia, SQL...)
- Liefert ansprechende *out-of-the-box* Templates
:::

## Ausgabeformate

- `html`: Books, Slides, Blogs...
- `pdf`: Books, Slides
- `epub`: Books
- `word`: Books
- `pptx`: Slides

## √úbung Quarto 1 üõ†Ô∏è

:::{.incremental}
1. Installiert quarto [quarto.org](https://quarto.org)
2. √ñffnet ein Terminal im Folder, wo ihr mit Pandoc docx ‚Üí md konvertiert habt
3. Konvertiert das Markdown File in html mit folgendem Command: 

   ```bash
   quarto render markdown.md
   ```
:::

<div style="height: 40px"></div>

:::{.incremental}
- `render` ist eine Funktion des Programms `quarto`
- Auch hier ist `markdown.md` ein positionales Argument
- Der Output ist (wenn nicht anders definiert) ein HTML-File
:::

## √úbung Quarto 2 üõ†Ô∏è

:::{.incremental}
- Interaktives entwickeln mit `render`: ü´§
- `quarto preview` erm√∂glicht ein live-preview (UX: ü•∞)
  ```bash
  # quarto render markdown.md
  quarto preview markdown.md
  ```
- versucht es aus!
:::


## √úbung Quarto 3 üõ†Ô∏è

- Erstellt ein pdf File aus eurem Markdown
- Installiert daf√ºr (falls n√∂tig) `tinytex`

# HTML und das Web

## HTML vs PDF

- Der bisherige *de facto* Standart f√ºr Lehrmaterialien: PDFs via Moodle
- PDFs haben Vorteile, aber auch viele Limitierungen


:::: {.columns}

::: {.column .fragment width="40%"}
**Vorteile**

- ‚úÖ Formatierung (Drucken)
- ‚úÖ *single-file*
- ‚úÖ Offline nutzbar

:::

::: {.column .fragment width="60%"}
**Nachteile**

- üö´ √∂ffentliche Wahrnehmung (OER)
- üö´ responsiv f√ºr verschiedene devices (BYOD)
- üö´ interaktiven Elemente
- üö´ √úbersetzbarkeit (Deutsch ‚Üî Englisch)
- üö´ Accessibility-Features (z.B. Screen Readers)
:::
::::

## HTML ver√∂ffentlichen

:::{.incremental}
- HTML Files k√∂nnen offline gespeichert / geteilt werden <span class="fragment">‚Üí un√ºblich und ungewohnt</span>
- Sinnvoller / √ºblicher: Gehostete Webseiten erstellen
- Viele M√∂glichkeiten:
  - GitHub Pages (ZHAW Internes GitHub)
  - Netlify
  - Posit Connect (ZHAW Internes Posit Connect)
  - QuartoPub
  - Confluence (ZHAW Internes Confluence)
:::

## √úbung HTML ver√∂ffentlichen 1 üõ†Ô∏è

### Netlify Drop

:::{.incremental}
1. √ñffnet die Website [app.netlify.com/drop](https://app.netlify.com/drop) (kein Login n√∂tig)
2. Drag-and-drop *den Ordner* mit dem HTML Outputfile aus der *√úbung Quarto*
3. Wartet bis der Upload fertig ist und im *Deploy log* <span id="complete">Complete</span> angezeigt wird
4. Klick auf <span id="open">Open production deploy</span>
5. Die Website befindet sich auf [irgendwas.netlify.app/*filename.html*](irgendwas.netlify.app)
   - *filename.html* muss noch hinzugef√ºgt werden!
   - dies kann vermieden werden, wenn statt filename.html *index.html* verwendet wird
:::

## √úbung HTML ver√∂ffentlichen 1 üõ†Ô∏è

### Netlify Drop

Diese Methode ist zwar sehr einfach, aber:

:::{.incremental}
- Ohne Login ist Ver√∂ffentlichung zeitlich beschr√§nkt <span class="fragment hl">‚Üí mit Login unbeschr√§nkt</span>
- Ben√∂tigt drag-and-drop <span class="fragment hl">‚Üí Kommandozeile `quarto publish netlify` </span>
- URL ist wenig ansprechend <span class="fragment hl">‚Üí Mit `CNAME` *eigener* Domain (siehe [dxi.ai](https://dxi.ai/))</span>
:::

:::{.notes}
- ZHAW Domain *noch* nicht m√∂glich
- Take home message: HTMLs lassen sich √ºber herk√∂mmliche Hosting Plattformen ver√∂fentlichen
:::

## √úbung HTML ver√∂ffentlichen 2 üõ†Ô∏è

### ZHAW Posit Connect

:::{.incremental}

1. Logged auch mit dem ZHAW Benutzername / K√ºrzel auf dem Server ein: <br> [statistik-ide.zhaw.ch/rsconnect](https://statistik-ide.zhaw.ch/rsconnect)
2. Klickt auf eure Mailadresse rechts Oben und w√§hlt "*API Keys*"
3. Erstellt einen neuen API Key und gibt ihm einen sinnvollen Namen (z.B. `zhaw laptop`)
4. Kopiert den API Key in die Zwischenablage
5. Gebt im Terminal folgenden Befehl ein 
   ```bash
   quarto publish connect

   Server URL: ‚Ä∫ https://statistik-ide.zhaw.ch/rsconnect/  # URL eingeben 
   API Key: ‚Ä∫ ********************************             # API Key eingeben
   ```
6. Danach sollte ein Browserfenster mit eurem Inhalt erscheinen
   - spezifische Freischaltung m√∂glich
   - URL unsch√∂n ‚Üí wenigstens ein ZHAW subdomain

:::

:::{.notes}

- Die ZHAW verf√ºgt √ºber einen Posit Connect Server
- F√ºr Lehre kostenlos
- f√ºr Forschung nicht nutzbar (Lizenzkosten zu hoch)
- Inhalte k√∂nnen spezifisch freigeschaltet werden
- Inhalte sind √ºber einen unsch√∂nen zhaw subdomain ersichtlich. Hier k√∂nnte der zhaw interne url shortener abhilfe leisten
:::



# Quarto Advanced

## YAML Header


:::{.incremental}
- YAML: *YAML Ain‚Äôt a Markup Language*
- Eine maschinen- *und menschenlesbare* Art, strukturierte Daten zu speichern
- Ein Beispiel:
  ```yaml
  title: A song of ice and fire
  author: George R. R. Martin
  ```
- In Quarto: Metadaten festhalten (z.B. Titel, Autor und Datum)
- Wird zu Beginn des Dokuments eingef√ºgt und mit `---` umschlossen
:::

## √úbung YAML Header 1 üõ†Ô∏è

- F√ºgt eurem Markdown File Metadaten mittels YAML Header hinzu

```yaml
---
title: A song of ice and fire
author: George R. R. Martin
---
```

## √úbung YAML Header 2 üõ†Ô∏è


```{.default code-line-numbers="5-9"}
---
format: pdf   # default output: pdf
lang: de-CH   # Sprache: Deutsch
---
```


## √úbung YAML Header 3 üõ†Ô∏è

```yaml
---
format: 
  pdf:            # pdf-spezifische Optionen:
    toc: true     # - soll eine Table of Contents herausgegeben werden?
    toc-depth: 1  # - wie viele Ebenen sollen im TOC dargestellt werden?
---
```

## √úbung Querverweise üõ†Ô∏è

- F√ºgt ein Querverweis auf ein Bild ein. Z.B:
- *siehe @fig-baratheon-0*
- ([quarto.org](https://quarto.org/docs/authoring/cross-references.html) ‚Üí Guide ‚Üí Authoring ‚Üí Scholarly Writing ‚Üí Cross-References)

<div >
![Das Wappen des Hauses Baratheon aus *A Song of Ice and Fire*](images/baratheon.png){#fig-baratheon-0 width="100px"}
</div>

. . . 

- F√ºr einen Querverweis braucht das Element, auf das man verweisen m√∂chte es eine *ID*
- Diese wird in `{}` gesetzt und beginnt mit `#`, bei Bilder folgt auf `#` ein `fig`. Z.B:

  ```markdown
  ![Das Wappen des Hauses Baratheon...](images/baratheon.png){#fig-baratheon}
  ```
- Um auf das Bild zu verweisen verwendet man `@fig-baratheon`


:::{.notes}
- `#fig` macht aus der Referenz "Abbildung"
- auf `lang` achten!
:::

## √úbung Querverweise üõ†Ô∏è {#sec-uebung-quarto-featuers-2}

- F√ºgt ein Querverweise auf eine Kapitelmarke ein. Z.B.
- *siehe @sec-uebung-quarto-featuers-2*
- ([quarto.org](https://quarto.org/docs/authoring/cross-references.html) ‚Üí Guide ‚Üí Authoring ‚Üí Scholarly Writing ‚Üí Cross-References)

<div style="height: 100px"></div>
. . . 

- Kapitelmarken erhalten ein `{#sec-}`
- Kapitel werden (aktuell) nur mit *Nummern* referenziert
  - im YAML header: `number-sections: true`
  - Siehe <https://github.com/quarto-dev/quarto-cli/issues/1196>


## √úbung Subfigures üõ†Ô∏è

- In Quarto k√∂nnen *Figures* aus *Subfigures* bestehen
- Siehe: [quarto.org](https://quarto.org/docs/authoring/figures.html#subfigures) ‚Üí Guide ‚Üí Authoring ‚Üí Figures ‚Üí Subfigures
- Erstellt ein Subfigure Layout, √§hnlich wie das folgende:

:::{#fig-houses layout-nrow="1"}

![House Baratheon](images/baratheon.png){#fig-barathon}

![House Baylish](images/baylish.png){#fig-baylish}

![House Arryn](images/arryn.png){#fig-arryn}

![House Bolton](images/bolton.png){#fig-bolton}


Eine Sammlung verschiedener Wappen aus dem Buch "*A song of Ice and Fire*", erstellt von *dezzzart* publiziert auf [deviantart.com](https://www.deviantart.com/dezzzart)
:::

## √úbung Tabellen üõ†Ô∏è

- Tabellen sind in Markup Sprachen etwas umst√§ndlich
- Vor allem, wenn sie h√§ufig editiert / aktualisiert werden
  - ‚Üí In diesem Fall empfiehlt sich die Verwendung von R / Python Codeblocks
- F√ºr einfache bzw. sich nicht ver√§ndernde Tabellen ist der Markup Syntax ausreichend
- F√ºr den Export aus Excel: [tablesgenerator.com](https://www.tablesgenerator.com/markdown_tables)
- Es gibt 3 Syntax Formen:
  - Pipe Tables
  - Grid Tables
  - HTML Tables


## √úbung Tabellen üõ†Ô∏è

- Sind sehr einfach im Syntax daf√ºr etwas beschr√§nkt in den Features
- [quarto.org](https://quarto.org/docs/authoring/tables.html) ‚Üí Authoring ‚Üí Tables


### Pipe Table

```markdown
| fruit  | price   |
|:-------|--------:|
| apple  |  2.05   |
| pear   |  1.37   |
| orange | 30.09   |

: Eine "pipe" Tabelle {#tbl-pipe}
```


| fruit  | price   |
|:-------|--------:|
| apple  |  2.05   |
| pear   |  1.37   |
| orange | 30.09   |

: Eine "pipe" Tabelle {#tbl-pipe}


:::{.notes}
- Die Doppelpunkte legen die ausrichtung fest (link, rechts, zentriert)
- die "|" m√ºssen nicht aneinander ausgerichtet sein (dies dient lediglich der lesbarkeit)
:::


## √úbung Tabellen üõ†Ô∏è


### Grid Tables

- Haben mehr features
- sind etwas umst√§ndlicher zu schreiben
- [quarto.org](https://quarto.org/docs/authoring/tables.html) ‚Üí Authoring ‚Üí Tables

```markdown
+-----------+-----------+--------------------+
| Fruit     | Price     | Advantages         |
+===========+===========+====================+
| Bananas   | $1.34     | - built-in wrapper |
|           |           | - bright color     |
+-----------+-----------+--------------------+
| Oranges   | $2.10     | - cures scurvy     |
|           |           | - tasty            |
+-----------+-----------+--------------------+

: Sample grid table.
```


## √úbung Tabellen üõ†Ô∏è

- F√ºgt in eurem Bericht eine Tabelle ein
- Verwendet dazu (bei Bedarf) [tablesgenerator.com](https://www.tablesgenerator.com/markdown_tables)



## √úbung Zitieren üõ†Ô∏è

- Quarto erleichtet das Zitieren und Erstellen von Literaturverzeichnissen
- Die Metadaten der Literatur wird in sog. Bibtex-Keys gespeichert
- Bibtex-Keys k√∂nnen aus GoogleScholar usw. exportiert oder via Browseraddin generiert werden.

![](images/google-scholar-1.png)

## √úbung Zitieren üõ†Ô∏è

![](images/google-scholar-2.png)

## √úbung Zitieren üõ†Ô∏è


```{.bibtex}
@article{einstein1905,
  title={Zur Elektrodynamik bewegter K√∂rper},
  author={Einstein, Albert},
  journal={Annalen der physik},
  volume={4},
  year={1905}
}

```

:::{.incremental}
- Dieser Bibtex-Keys werden in einem File abgespeichert, z.B `literatur.bib`
- Das Bibtex-File wird √ºber den YAML Header ins Quartodokument eingebunden:
  ```yaml
  bibliography: literatur.bib
  ```
- √úber die ID kann der Eintrag nun Zitiert werden:
- Folgender Eintrag: 
  ```{.markdown}
  @einstein1905 postulierte... 
  ```
- Wird zu: @einstein1905 postulierte... 
- Viele Formen stehen zur Verf√ºgung. Siehe: [quarto.org](https://quarto.org/docs/authoring/footnotes-and-citations.html) ‚Üí Guide ‚Üí Authoring ‚Üí Scholarly Writing ‚Üí Citations and Footnotes
:::


## √úbung Zitieren üõ†Ô∏è

- F√ºgt eurem Dokument eine Referenz sowie ein Litearturverzeichnis hinzu



# Quato Professional

## Quarto Projects

- Von einem File auf *viele* Files

- Setup:
  - Quarto-Konfigurationsdatei: `_quarto.yaml` 
  - `index.qmd` (ohne YAML Header)
  - Optional: Weitere qmd-Files, die √ºber `_quarto.yaml` eingebunden werden

## Quarto Projects

```{.yaml}
project: 
  type: book
  preview: 
      port: 5678
  execute-dir: project
  pre-render: pre-render.r

lang: de

format: 
  html:
    theme:
      dark: [darkly, custom-dark.scss]
      light: [flatly, custom-light.scss]
    css: 
      - custom.css
      - theme-custom.scss
      #- presenter-mode.css
    bibliography: bibliography.bib
    number-sections: false
    code-tools:
      source: false
    include-in-header:
      - script.html

execute:
  freeze: true
  error: false
  message: false
  warning: false

knitr:
  opts_chunk: 
    collapse: true
    #tidy: true
    
book:
  title: "Research Methods HS23"
  sidebar: 
    logo: images/zhaw_sw_neg.png
    collapse-level: 1
    style: floating
  reader-mode: true    
  # globbing would be cool. Wait for
  # https://github.com/quarto-dev/quarto-cli/issues/2120 or
  # https://github.com/quarto-dev/quarto-cli/issues/1917 to be resolved 

  chapters:
    - index.qmd
    - part: PrePro.qmd
      chapters:
      - prepro/Prepro1_Vorbereitung.qmd
      - --
      - prepro/Prepro1_Demo.qmd
      - prepro/Prepro1_Uebung.qmd
      - --
      - prepro/Prepro2_Demo.qmd
      - prepro/Prepro2_Uebung_A.qmd
      - prepro/Prepro2_Uebung_B.qmd
      - --
      - prepro/Prepro3_Demo.qmd
      - prepro/Prepro3_Uebung.qmd
    - part: InfoVis.qmd
      chapters:
      - infovis/Infovis1_Vorbereitung.qmd
      - --
      - infovis/Infovis1_Demo.qmd
      - infovis/Infovis1_Uebung.qmd
      - infovis/Infovis1_Script_eda.qmd
      - --
      - infovis/Infovis2_Uebung_A.qmd
      - infovis/Infovis2_Uebung_B.qmd
    - part: Stat1-4.qmd
      chapters:
      - stat1-4/Statistik1_Vorbereitung.qmd
      - --
      - stat1-4/Statistik1_Demo.qmd
      - stat1-4/Statistik1_Novanimal.qmd
      - stat1-4/Statistik1_Uebung.qmd
      - stat1-4/Statistik1_Loesung.qmd
      - --
      - stat1-4/Statistik2_Demo.qmd
      - stat1-4/Statistik2_Uebung.qmd
      - stat1-4/Statistik2_Loesung_Beispiel.qmd
      - stat1-4/Statistik2_Loesung_1.qmd
      - stat1-4/Statistik2_Loesung_2223s.qmd
      - stat1-4/Statistik2_Loesung_23n.qmd
      - --
      - stat1-4/Statistik3_Demo.qmd
      - stat1-4/Statistik3_Uebung.qmd
      - stat1-4/Statistik3_Loesung.qmd      
      - --
      - stat1-4/Statistik4_Demo.qmd
      - stat1-4/Statistik4_Uebung.qmd      
      - stat1-4/Statistik4_Loesung_1.qmd
      - stat1-4/Statistik4_Loesung_2n.qmd
      - stat1-4/Statistik4_Loesung_2s.qmd
    - part: Stat5-8.qmd
      chapters:
      - stat5-8/Statistik5_Vorbereitung.qmd
      - --
      - stat5-8/Statistik5_Demo.qmd
      - stat5-8/Statistik5_Uebung.qmd      
      - stat5-8/Statistik5_Loesung_1.qmd
      - stat5-8/Statistik5_Loesung_2.qmd
      - --
      - stat5-8/Statistik6_Demo.qmd
      - stat5-8/Statistik6_Uebung.qmd      
      - stat5-8/Statistik6_Loesung.qmd
      - --
      - stat5-8/Statistik7_Demo.qmd
      - stat5-8/Statistik7_Uebung.qmd      
      - stat5-8/Statistik7_Loesung.qmd
      - --
      - stat5-8/Statistik8_Demo.qmd
      - stat5-8/Statistik8_Uebung.qmd      
      - stat5-8/Statistik8_Loesung.qmd
    - part: StatKons.qmd
      chapters:
      - statKons/StatKons0_Vorbereitung.qmd
      - --
      - statKons/StatKons1_Demo_assoziationen.qmd
      - statKons/StatKons1_Demo_open_datasets.qmd
      #- statKons/StatKons1_Demo_suggest_datasets.qmd
      - --
      - statKons/StatKons2_Demo_PCA.qmd
      - --
      - statKons/StatKons3_Demo_LM.qmd
      - --
      - statKons/StatKons4_Demo_GLM.qmd
    - part: RaumAn.qmd
      chapters:
      - rauman/Rauman0_Vorbereitung.qmd
      - --
      - rauman/Rauman1_Uebung_A.qmd
      - rauman/Rauman1_Uebung_B.qmd
      - --
      - rauman/Rauman2_Uebung_A.qmd
      - rauman/Rauman2_Uebung_B.qmd
      - --
      - rauman/Rauman3_Uebung_A.qmd
      - rauman/Rauman3_Uebung_B.qmd
      - rauman/Rauman3_Uebung_C.qmd
      - --
      - rauman/Rauman4_Uebung_A.qmd
      - --
      - rauman/Rauman5_Uebung_A.qmd 
      - rauman/Rauman5_Uebung_B.qmd 
    - part: "Fallstudie S"
      chapters:
      - fallstudie_s/0_Vorbereitung.qmd
      - --
      - fallstudie_s/1_Einf√ºhrung.qmd
      - fallstudie_s/2_Besuchermonitoring.qmd
      - --
      - fallstudie_s/3_Aufgabenstellung_WPZ.qmd
      - --
      - fallstudie_s/4_Projektierung.qmd
      - fallstudie_s/5_Datenverarbeitung.qmd
      - fallstudie_s/6_Deskriptive_Analysen.qmd
      - fallstudie_s/7_Multivariate_Modelle.qmd
    - part: "Fallstudie N"
      chapters:
      - fallstudie_n/1_Vorbemerkung.qmd
      - fallstudie_n/2_Datenverarbeitung.qmd
      - fallstudie_n/3_Berechnung_Homeranges.qmd
      - fallstudie_n/4_Multivariate_Modelle.qmd
      - fallstudie_n/5_Variablenselektion.qmd
      - fallstudie_n/6_Guete_und_Diagnostics.qmd
      #- --
      #- fallstudie_n/7_Modelle_mit_Nutzungsintensitaet.qmd
    - "References.qmd"
```

# Versionskontrolle mit Git und GitHub

## Git(Hub)

- **Git**: Verteiltes Versionskontrollsystem
- **GitHub**: Webplattform f√ºr Hosting von Git-Repositories.

:::{.notes}
- Git: f√ºr die Nachverfolgung von √Ñnderungen im Quellcode w√§hrend der Softwareentwicklung. Erm√∂glicht Zusammenarbeit, Verwaltung von Codeversionen und √Ñnderungsverfolgung. Bekannt f√ºr Geschwindigkeit und Effizienz.
- GitHub: Bietet Tools f√ºr Zusammenarbeit, Code√ºberpr√ºfung und Projektverwaltung. Beliebt bei Entwicklern zur Teilung, Zusammenarbeit und Beitrag zu Open-Source-Projekten. Enth√§lt Funktionen wie Issues und Pull Requests.
--

:::



## Git Workflow

- `Add`: Sammelt √Ñnderungen
- `Commit`: Speichert eine Version mit √Ñnderungen.
- `Push`: Hochladen von lokalen Commits ins Remote Repository.
- `Pull`: Abrufen und Einpflegen von √Ñnderungen aus dem Remote Repository.
- `Pull Request`: Anfrage zur √úberf√ºhrung von √Ñnderungen zwischen Branches.
- `Merge Conflict`: Problem bei der automatischen Zusammenf√ºhrung von Branches.
- `Issue`: Verfolgung von Problemen, Vorschl√§gen oder Aufgaben in Projekten.


## √úbung

:::{.incremental}
1. `Fork`t die √úbungsunterlagen von [Fit-mit-Markdown](https://fit-mit-markdown.github.io/) 
2. Bearbeitet etwas im einem Dokument
3. `Commit`et und `Push`t die √Ñnderungen
4. Erstellen Sie einen Merge Request auf GitHub
5. Verwenden Sie dazu die Hilfe von [fit-mit-markdown.github.io/](https://fit-mit-markdown.github.io/)
:::