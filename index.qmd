---
title: "Reproducible and Publicly Visible Data Analysis"
author: "Nils Ratnaweera"
date: 03/05/2024
format: 
  revealjs:
    theme: dark
    logo: images/zhaw_sw_neg.png
    smaller: true
    css: style.css
    navigation-mode: vertical
    number-sections: true
    number-depth: 1
    center: true
    toc: true
    toc-depth: 1
lang: en-GB
bibliography: literatur.bib
suppress-bibliography: true # otherwise, a bibliography is appended
---

# Today{.unnumbered .unlisted}


<!--
## Timeline

|               |                                              |
| ------------- | -------------------------------------------- |
| 08:00 - 08:45 | *1 Reproducibility* - *3 Markdown*           |
| 08:50 - 09:35 | *4 Quarto* - *5 Publishing HTML / Websites* |
| 09:50 - 10:35 | *6 Versioncontrol with Git / GitHub*         |
| 10:50 - 11:15 | *6 Versioncontrol with Git / GitHub*         |
| 11:45 - 12:00 | *Project work*                               |

-->


# [Reproducibility]{.hlo} in Data Science

---

## {data-background-image="images/garret.jpg"}


:::{.blockquote .font200 .outline .fragment}
I believe history will see RMarkdown as a turning point in the replication crisis.
:::

:::{.notes}

You all saw the video of Garret Grolemund for the RStudio conference 2019.

Note that Quarto, which we will discuss today, is the successor of RMarkdown.

:::


## {data-background-image="images/reproducibility_crisis-2.png" data-background-size="contain"}

:::{.notes}

It is estimated that 75 - 90% of preclinical results cannot be reproduced.

Other fields of science probabbly are even worse off.

:::


---

::: {.r-fit-text .uppercase}
Lack of [reproducibility]{.hlo}
:::

::: {.r-fit-text .uppercase}
is a problem
:::

---

::: {.r-fit-text .uppercase}
[Quarto]{.hlo}, [Git]{.hlo} & [GitHub]{.hlo} are
:::

::: {.r-fit-text .uppercase}
(part of) the solution
:::

# Literate Programming and [Quarto]{.hlo}


:::{.notes}
Let's start with *literate programming*, which is a term coined by Donald Knuth 1984. J. Bentley phrases it like so:
:::

## {data-background-image="images/pexels-anete-lusina-7256682.jpg"}

:::{.blockquote .font200 .outline}
When was the last time you spent a pleasant evening in a comfortable chair, reading a good R Script?
:::

:::{.blockquote .attribution .outline}
-- Adapted from John Bentley (1986) "Communications of the ACM"
:::

:::{.class}
content
:::

::: {.notes}
- Why would you even do that? 
- A lot of good R-Scripts are written, only a small portion of them are only ever read. Why?
- As mentioned, Donald Knuth "invented" this paradigm 1984.
:::

## Donald Knuth 1984

![](images/knuth.jpg)

:::{.notes}

Literate programming is a programming paradigm introduced in 1984

:::

## Donald Knuth 1984



::::::{.columns}

::::: {.column width="40%"}
![](images/knuthweb.png)
:::::

::::: {.column width="60%"}

::::{.r-stack}

:::{.fragment .frade-in .fade-out}
> I‚Äôve stumbled across a method of composing programs that excites me very much.

:::

:::{.fragment .frade-in-then-out}

> Let us change our traditional attitude to the construction of programs:
>
> *Instead of imagining that our main task is to instruct a computer what to do, let us concentrate rather on explaining to human beings what we want a computer to do.*

:::

::::
:::::

::::::


:::{.notes}


- Donald Knuth invented this method for Programs. But we can replace the word "program" with R Script. 
- Check if the sound works (next up: video)

:::


## {data-background-video="video/knuth.mp4" data-background-size="contain"}


## Exercise: Literate Programing üõ†Ô∏è

*Make your R-Script literate*

1. Download the Folder `GOT.zip` from moodle (*Game of Thrones Dataset*)
2. Unzip the File in a reasonable location
3. Open the .RProj File with RStudio
4. Run the RScript got-1.R and try to undestand what is happening
5. Make the R-Script literate by *explaining to human beings what we want a computer to do*



:::{.notes}

Do this as well via sharing the screen

:::

# Markdown

## [Why]{.hlo} Markdown?

:::{.notes}
- Using RComments to explain your code is great, but very limiting
- We cannot properly structure our comments: Highlight words, work with images, hyperlinks etc
- This is where markdown comes into play
:::

## What is Markdown?

- A Lightweight markup language
- Easy to learn 
- Machine readable *and* human readable

## Markdown Syntax

```{.markdown}
# A story of a fox

The *quick* brown fox **jumps** over the lazy dog.

![](images/fox-over-dog.jpg)
```

. . . 

<div style="height: 100px"></div>

:::{#story-of-a-fox}
### A story of a fox

The *quick* brown fox **jumps** over the lazy dog.

![](images/fox-over-dog2.jpg){width="240px"}

:::

::: {.notes}
- [Markdown Basics](https://quarto.org/docs/authoring/markdown-basics.html)
- [Abbildungen](https://quarto.org/docs/authoring/figures.html)
- [Tabellen](https://quarto.org/docs/authoring/tables.html)
:::


## Markdown exercise üõ†Ô∏è


:::{.incremental}
1. Grab your smartphone (if you have one)
2. Open your favorite messenger: Threema, Telegram or WhatsApp  (not Signal)
3. Send the following text message to your favorite geek:

:::

::: {.fragment}
Threema / WhatsApp:
```{.markdown code-line-numbers="false"}
Did you know? Threema and WhatsApp support markdown formatting.
*Bold*, _italic_ and ~strikethrough~!
```
:::

::: {.fragment}
Telegram:

```{.markdown code-line-numbers="false"}
Did you know? Telegram supports markdown formatting.
**Bold**, *italic* and ~~strikethrough~~.
```
:::


## {background-video="video/threema_low2.mp4" background-size="contain" visibility="hidden"}


##

:::{.r-hstack .justify-between} 

![](video/formatting.png){width="60%"}

![](video/formatted.png){width="60%"}


:::{.notes}
- On the left side, our "Markdown Editor" previews our markdown syntax while typing. 
- However, event without this preview the markdown text is human readable
- On the right side, we see a *rendered* version of our text.
:::

:::


## If that was Mark[down]{.hlo}, what's Mark[up]{.hlo}?    

::: {.incremental}
- Markup is a generic term for a language which structures text in a machine readable way (use of tags / symbols)
- Markdown is *a* markup language
- Other markup languages include: HTML and LaTeX
- Here is an example of making **bold** text
  - Markdown: `**Hello World**`     
  - HTML: `<b>Hello World</b>`  
  - LaTeX: `\textbf{Hello World}`

:::

:::{.notes}
As seen in the comparison, Markdown is *Human readable!*
:::


# Quarto

## What is Quarto?

:::{.incremental}
- Combines Markdown with R to generate Documents
- Also works with Python, Julia...
- Can create PDFs, Websites, Books or Slides of your data analysis
- Is OpenSource
- Is used via the commandline / terminal
- Workflow:
  ![](images/rstudio-qmd-how-it-works2.png)
:::

## Quarto Exercise 1 üõ†Ô∏è


1. Check if quarto is installed by running the following command *in your terminal*:
   
   ```{.bash}
   quarto --version
   ```
2. install quarto if necessary (‚û≤ [quarto.org](https://quarto.org))


## Quarto Exercise 2 üõ†Ô∏è


1. Create a new Quarto file
   - Remove the checkbox *Use visual markdown editor*
   - Click on *Create empty document*
2. Save as `got-2.qmd`
3. Write some prose on the analysis done in `got-1.R` (no R code yet)
4. Render the file to html by running the following code *in your terminal*

   ```{.bash}
   quarto render got-2.qmd
   ```

:::{.notes}
- To highlight that we are really just working with textfiles, dont create a quarto file yet
- Don't add any R Code yet!
- You could also use RMarkdown, but we recommend quarto
:::


## Quarto Exercise 3 üõ†Ô∏è

:::{.incremental}
- Iterative development with `render`: ü´§
- Iterative development with `preview`: ü•∞

  ```{.bash}
  # quarto render markdown.md
  quarto preview markdown.md
  ```
:::


## Quarto Exercise 4 üõ†Ô∏è

:::{.incremental}

- Markdown talks to humans
- R Code talks to humans & the computer
- Let's add the R-Code from `got-1.R` with <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>i</kbd>
- This adds a "fence" where we can add R-Code
- Add the R-Code from `got-1.R` into the code block
- Check your updated preview
:::


## YAML Header


:::{.incremental}
- YAML: *YAML Ain't a Markup Language*
- A machine- and human-readable way of storing structured data
- An example:  
  ```{.yaml}
  title: Analysis of GOT Series
  author: Nils Ratnaweera
  ```
- In Quarto: Record metadata (e.g. title, author and date)
- Is inserted at the beginning of the document and enclosed with `---`
:::


## YAML Header Exercise 1 üõ†Ô∏è

- Add metadata to your markdown file using YAML headers
- Regard the output (`quarto preview`)

```{.yaml}
---
title: Analysis of GOT Series
author: Your Name
---
```

## YAML Header Exercise 2 üõ†Ô∏è


- Add a format specification to your YAML header: Either `typst` (recommended) or `pdf`
- This renders your file to pdf
- If you use `pdf`, you might need to install `tinytext` (see message in terminal)

```{.yaml}
---
title: Analysis of GOT Series
author: Nils Ratnaweera 
format: typst
---
```


## Exercise YAML Header 3 üõ†Ô∏è

```yaml
---
format: 
  pdf:            # pdf specific optons:
    toc: true     # - should a Table of Contents be published?
    toc-depth: 1  # - How many layers should be displayed in the TOC?
---
```


# Publishing HTML / Websites

## Publishing HTML Files

:::{.incremental}
- HTML can be shared publicly by creating a website
- Some options:
  - RPubs
  - QuartoPub
  - GitHub Pages
  - Netlify

:::

## Exercise Publish HTML with RPubs üõ†Ô∏è

- Create a new account on [rpubs.com](https://rpubs.com/)
- Click on the Blue Publish Button on the Top right of your script
- Choose *RPubs*
- Click on Publish


## Exercise Publish HTML with QuartoPub üõ†Ô∏è{data-visibility="hidden"}


- Create a new account on [quartopub.com](https://quartopub.com/)
- Run the following command in your terminal:

  ```{.bash}
  quarto publish quarto-pub got-2.qmd
  ```


# Quarto Advanced



## Quarto Advanced Exercise 1 üõ†Ô∏è

- Insert one of the images included in your folder into your document
- ([quarto.org](https://quarto.org/docs/authoring/figures.html) ‚Üí Guide ‚Üí Authoring ‚Üí Figures)

## Quarto Advanced Exercise 2 üõ†Ô∏è

- Insert an cross-reference to this image. E.G: *see @fig-baratheon-0*
- ([quarto.org](https://quarto.org/docs/authoring/cross-references.html) ‚Üí Guide ‚Üí Authoring ‚Üí Scholarly Writing ‚Üí Cross-References)


:::{}
![The coat of arms of House Baratheon from *A Song of Ice and Fire*](images/baratheon.png){#fig-baratheon-0 width="100px"}
:::


:::{.notes}
- For a cross-reference, the element to which you want to refer needs an ID
- This is set in {} and begins with #, for images # is followed by a fig. e.g:

  `![The coat of arms of the House of Baratheon...](images/baratheon.png){#fig-baratheon}`

- To refer to the image, use `@fig-baratheon`
::: 


## Quarto Advanced Exercise 3 üõ†Ô∏è {#sec-uebung-quarto-featuers-2}

- Insert a crossreference to a chapter eg *see @sec-uebung-quarto-featuers-2*
- ([quarto.org](https://quarto.org/docs/authoring/cross-references.html) ‚Üí Guide ‚Üí Authoring ‚Üí Scholarly Writing ‚Üí Cross-References)


:::{.notes}

- Chapter references get a `{#sec-}`
- Chapters are (currently) only referenced with *numbers*
  - in the YAML header set: `number-sections: true`
  - See this open issue <https://github.com/quarto-dev/quarto-cli/issues/1196>

:::

## Quarto Advanced Exercise 4 üõ†

- In Quarto, *figures* can consist of *subfigures*
- See: [quarto.org](https://quarto.org/docs/authoring/figures.html#subfigures) ‚Üí Guide ‚Üí Authoring ‚Üí Figures ‚Üí Subfigures
- Creates a subfigure layout similar to the following:

:::{#fig-houses layout-nrow="1"}

![House Baratheon](images/baratheon.png){#fig-barathon}

![House Baylish](images/baylish.png){#fig-baylish}

![House Arryn](images/arryn.png){#fig-arryn}

![House Bolton](images/bolton.png){#fig-bolton}


A collection of different coats of arms from the book ‚Äò*A song of Ice and Fire*‚Äô, created by *dezzzart* published on [deviantart.com](https://www.deviantart.com/dezzzart)
:::


## Quarto Advanced Exercise 5 üõ†

- Add a caption and a cross reference to your `ggplot`-figure


## Quarto Advanced Exercise 6 üõ†

- Display a table with the top 10 characters in regard to screentime, displaying only the columns `name`, `screentime` and `episodes`.
- Reference this table in your text
- Add a caption to your table
- [quarto.org](https://quarto.org/docs/authoring/tables.html#cross-references) ‚Üí Guide ‚Üí Authoring ‚Üí Tables ‚Üí Cross References
- Hint: use `knitr::kable()`


## Quarto Advanced Exercise 7 üõ†

- Add a (dummy) abstract
- Make sure this abstract is not numbered and not in the TOC
- [quarto.org](https://quarto.org/docs/output-formats/html-basics.html#table-of-contents) ‚Üí Guide ‚Üí Documents ‚Üí HTML ‚Üí HTML Basics

## Quarto Advanced Exercise 8 üõ†

Let's add a citation!

1. Got to [scholar.google.com](https://scholar.google.com/) 
2. Get the bibtex entry of a scientific paper
3. Create a new text file named `bibliography.bib`
4. Add the bibtex entry to this file
5. Include the file in the YAML header: `bibliography: bibliography.bib`
7. Now you can reference this entry using:
   - `@knuth1984` for *@knuth1984*
   - `see [@knuth1984]` for *see [@knuth1984]*

---  

- For more information see [quarto.org](https://quarto.org/docs/authoring/citations.html) ‚Üí Guide ‚Üí Authoring ‚Üí Scholarly Writing ‚Üí Citations
- To include Zotero, see [quarto.org](https://quarto.org/docs/visual-editor/technical.html#citations-from-zotero) ‚Üí Guide ‚Üí Tools ‚Üí RStudio IDE ‚Üí Visual Editor ‚Üí Technical Writing ‚Üí Citations ‚Üí Citations from Zotero

:::{.notes}


content
:::

# Versioncontrol with Git and GitHub{#sec-git-github}

## 

![](images/git-for-designers.jpg)


## GIT LETS YOU TELL THE STORY OF YOUR PROJECT

---

::: {.font150}
You use Git to take snapshots of all the files in a folder. 

This folder is called a [repository]{.hlo} or [repo]{.hlo}.

:::

---

::: {.font150}

When you want to take a snapshot of a file or files, you create a [commit]{.hlo}
:::

---


{{< include commit-animation.qmd >}}


## Convinced?

Want to learn Git?

‚Üí Do the optional exercises on [computationalmovementanalysis.github.io](https://computationalmovementanalysis.github.io/) 

(*Week 3 ‚Üí Exercise A* and *Exercise B*)

<!-- 2025: Continue here: Add exercises to publish to github without git -->

## Exercise Publish HTML with GitHub üõ† {visibility="hidden"}

- Create a GitHub Account (‚û≤ [github.com](https://github.com/))
- Create a new Repo (`+` ‚Üí *new repository*)
  - Provide a reasonable name (e.g. GOT-Analysis)
  - Set visibility to public
  - Click on *Create repository*

## Exercise Publish HTML with GitHub üõ† {visibility="hidden"}


- Upload Files:
  - Click on *uploading an existing file*
  - Add the entire content of your RProject to the Repo
  - Click, on *Commit changes*
- Got to Settings ‚Üí Pages: in *Branch*, select *Main* instead of *None* and click on *Save*
- Got to the *Code* Tab
  - Click on the settings symbol ‚öô
  - Choose *Use your GitHub Pages website*
  - Click *Save changes*
- Go to the *Actions* Tab and wait for the worflows to complete

## Exercise Publish HTML with GitHub üõ†Ô∏è {visibility="hidden"}


- Got back to the *Codes* Tab and Click on the URL
  - The URL is incomplete: we have to append `got-2.html`
  - We don't have to append the filename if it's called `index.html` ‚Üí Rename `got-2.qmd` to `index.qmd` and re-render





