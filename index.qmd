---
title: "Quarto Schulung"
author: "Nils Ratnaweera, Dominic L√º√∂nd"
date: 02/13/2024
format: 
  revealjs:
    theme: dark
    logo: images/zhaw_sw_neg.png
    smaller: true
    css: style.css
    navigation-mode: vertical
---

# Heute

## Ablauf


1. Markup und Markdown
2. Pandoc und Quarto
3. HTML outpus publizieren
4. Kollaboration mit Textfiles

## Ziele

::: {.incremental}
- Vorteiler *einfacher Textdokumente* kennen
- Basics von Markdown kennen
- Basics von Quarto kennen
- Kollaboration mit Git und GitHub
:::



# Plaintext, Markup und Markdown

## Weniger ist mehr

Vorteile reiner Textfiles (plain text)

::: {.incremental}
1. Plattformunabh√§ngigkeit
2. Geringe Dateigr√∂√üe
3. Einfache Handhabung
4. Versionskontrolle
5. Langfristige Kompatibilit√§t
6. Suchbarkeit
7. Leichte Integration

:::


::: {.notes}

1. Plattformunabh√§ngigkeit: Textdateien sind auf allen Betriebssystemen leicht zug√§nglich (Windows, macOS, Linux).
2. Geringe Dateigr√∂√üe: Textdateien sind in der Regel kleiner als ihre formatierten Gegenst√ºcke, was den Speicherplatz spart.
3. Einfache Handhabung: Textdateien k√∂nnen einfach in jedem Texteditor bearbeitet werden, ohne spezielle Software.
4. Versionskontrolle: Einfache Textdateien erleichtern die Verwendung von Versionskontrollsystemen wie Git.
5. Langfristige Kompatibilit√§t: Textdateien haben eine h√∂here Wahrscheinlichkeit, auch in Zukunft von Software unterst√ºtzt zu werden.
6. Suchbarkeit: Textdateien erm√∂glichen eine effiziente Suche nach Informationen.
7. Leichte Integration: Einfache Textdateien lassen sich leicht in verschiedene Anwendungen und Workflows integrieren.

:::

## Was ist eine Markup Sprache?

- Auszeichnungssprache zur Strukturierung von Texten
- Maschinenlesebar (Verwendung von Tags / Symbolen)
- Klare Trennung von Inhalt und Formatierung
- *What you see is what you mean* (WYSIWYM)

::: {.notes}

Fokus auf was wir schreiben wollen, nicht wie es aussieht. 

:::



## Was f√ºr Markup Sprachen gibt es?


| Sprache        | Beispiel                                                |
|----------------|---------------------------------------------------------|
| HTML           | `<b>Fetter Text</b>`                                    |
| LaTeX          | `\textbf{Fetter Text}`                                  |
| Markdown       | `**Fetter Text**`                                       |


## Was ist Markdown?

- Leichtgewichtige Markup-Sprache f√ºr einfaches Textformatieren.
- Einfach zu erlernen 
- Maschinenlesbar *und* Menschenlesbar
- **Frontend** f√ºr Latex / HTML


## Markdown Syntax

```

# A story of a fox

The *quick* brown fox **jumps** over the lazy [dog](https://en.wikipedia.org/wiki/Dog).

![](images/dogs.jpg)

```

<div style="height: 100px"></div>

### A story of a fox

The *quick* brown fox **jumps** over the lazy [dog](https://en.wikipedia.org/wiki/Dog).

![](images/dogs.jpg)


::: {.notes}
- [Markdown Basics](https://quarto.org/docs/authoring/markdown-basics.html)
- [Abbildungen](https://quarto.org/docs/authoring/figures.html)
- [Tabellen](https://quarto.org/docs/authoring/tables.html)

:::


## Texteditor

- Ein guter Texteditor ist wichtig
- Empfehlungen
  - VSCode: [code.visualstudio.com](https://code.visualstudio.com/)
  - RStudio [posit.co/download/rstudio-desktop/](https://posit.co/download/rstudio-desktop/)
  - Pulsar [pulsar-edit.dev](https://pulsar-edit.dev/)



## √úbung Markdown üõ†Ô∏è

- Konvertiere deinen mitgebrachten Text in Markdown.
- Falls du keinen eigenen Text mitbebracht hast, nimm folgenden: [bit.ly/42vBKuu](https://bit.ly/42vBKuu)

TODO: 
  - Bei gr√∂sseren Texten nur die ersten paar Abs√§tze verwenden
  - Keine geheimen Texte!


# Pandoc

## Was ist Pandoc?

- Open-Source-Tool zur Konvertierung von Markup sprachen
- Vielf√§ltige Ein- und Ausgabeformate 
- Kein Grafisches Userinterface, wird √ºber den Terminal bedient (cli-tool)


> If you need to convert files from one markup format into another, pandoc is your *swiss-army knife*. Pandoc can convert between the following formats

![](images/pandoc.png)


## √úbung Pandoc üõ†Ô∏è

:::{.incremental}
1. Installiert Pandoc von [pandoc.org](https://pandoc.org/installing.html).
2. √ñffnet ein Terminal *im Folder, wo ihr das Markdown File erstellt habt*
3. Konvertiert das Markdown File in html mit folgendem Command: 

   ```bash
   pandoc markdown.md 
   ```
:::

:::{.incremental}
- Der Befehl `pandoc` ruft das Commandline Tool *pandoc* auf
- Das Argument `markdown.md`:
  - ist ein sogenanntes Positionalargument (engl: *positional argument*)
  - gilt als Input File
- Die Markup Sprache des Input Files wird von der Dateierweiterung inferiert (`.md` = Markdown)
- Da wir kein Output definiert haben, wird standartm√§ssig `html` herausgegeben
- Um ein PDF zu erstellen m√ºsste eine zus√§tzliche Komponente installiert werden
:::


:::{.notes}
TODO: MSI installer, wenn nur f√ºr den eigenen Nutzer interim admin nicht n√∂tig

:::

## √úbung Pandoc üõ†Ô∏è


```bash
# pandoc markdown.md 

pandoc -o output.html markdown.md 
```

<div style="height: 50px"></div>

:::{.incremental}

- `-o output.html`: 
  - ist ein *named argument*
  - definiert das Output File
- Die Markup Sprache des Output files wird von der Dateierweiterung inferiert (`.html`)

:::

## √úbung Pandoc üõ†Ô∏è

:::{.incremental}
- Die Verwendung von Commandline-Programmen (cli) ist eine wichtige und n√ºtzliche F√§higkeit
- cli Tools verf√ºgen meist √ºber eine eingebaute Hilfestellung (`-h` / `--help`)

  ```bash
  pandoc -h
  pandoc --help
  ```

  <div style="height: 20px"></div>
  ```
  pandoc [OPTIONS] [FILES]
    -f FORMAT, -r FORMAT  --from=FORMAT, --read=FORMAT                          
    -t FORMAT, -w FORMAT  --to=FORMAT, --write=FORMAT                           
    -o FILE               --output=FILE                                         
                          --data-dir=DIRECTORY                                  
    -M KEY[:VALUE]        --metadata=KEY[:VALUE]                                
                          --metadata-file=FILE                                  
    -d FILE               --defaults=FILE                                       
                          --file-scope[=true|false]                             
                          --sandbox[=true|false]                                
    -s[true|false]        --standalone[=true|false]                             
                          --template=FILE          
  ...
  ```
- die Hilfestellungen sind etwas gew√∂hnungsbed√ºrftig, daf√ºr aber umfangreich

:::

:::{.notes}
- Kurze form `-h` und lange Form `--help`

:::


## √úbung Pandoc üõ†Ô∏è

Der Umgang mit dem Terminal ist eine wichtige und n√ºtzliche F√§higkeit.

:::{.incremental}

- mit `cd` kann man *in Folders hinein* navigieren (`cd Documents`)
- mit `cd ..` kann man *aus Folders hinaus* navigieren
- das aktuelle Verzeichnis anzeigen lassen
  - Windows: `echo %cd%`
  - Linux / Mac: `pwd`
- mit `mkdir` kann man ein Verzeichnis erstellen (`mkdir verzeichnis`)
:::



# Quarto

## Was ist Quarto?


:::{.incremental}
- Ebenfalls ein Open-Source *cli* tool
- Baut auf Markdown und Pandoc auf
  ![](images/rstudio-qmd-how-it-works.png)
- Erweitert die standart Markdown-Sprache mit n√ºtzlichen Elementen
- Integriert die Ausf√ºhrung von Code (R, Python, Julia, SQL...)
- Liefert ansprechende *out-of-the-box* Templates

:::



## Ausgabeformate

- `html`: Books, Slides, Blogs...
- `pdf`: Books, Slides
- `epub`: Books
- `word`: Books
- `pptx`: Slides



## √úbung Quarto üõ†Ô∏è


:::{.incremental}
1. Installiert quarto [quarto.org](https://quarto.org)
2. √ñffnet ein Terminal *im Folder, wo ihr das Markdown File erstellt habt*
3. Konvertiert das Markdown File in html mit folgendem Command: 

   ```bash
   quarto render markdown.md
   ```
:::

<div style="height: 40px"></div>

:::{.incremental}

- `render` ist eine Funktion des Programms `quarto`
- Auch hier ist `markdown.md` ein positionales Argument
- Der Output ist (wenn nicht anders definiert) ein HTML-File
:::



## √úbung Quarto üõ†Ô∏è


- Interaktives entwickeln von Dokumenten mit `render` ist umst√§ndlich. 
- `quarto preview` erm√∂glicht ein live-preview (bessere *user experience*)

  ```bash
  # quarto render markdown.md
  quarto preview markdown.md
  ```


# HTML und das Web

## HTML vs PDF

- der bisherige *de facto* Standart f√ºr Lehrmaterialien: PDFs via Moodle
- PDFs haben Vorteile, aber auch viele Limitierungen
- Vorteile von PDFs:
  - stabilie Formatierung (Drucken)
  - ein eizige Datei (kann leicht gespeichert/kopiert werden)
  - offline nutzbar
- Nachteile von PDFs
  - kaum √∂ffentliche Wahrnehmung (OER)
  - nicht responsiv f√ºr verschiedene devices (BYOD)
  - keine interaktiven Elemente
  - schlecht √ºbersetzbar (Deutsch ‚Üî Englisch)
  - schlechte Accessibility-Features (z.B. Screen Readers)


## HTML ver√∂ffentlichen

- HTML Files k√∂nnen zwar wie PDFs gespeichert und geteilt werden, dies ist jedoch un√ºblich und ungewohnt
- Sinnvoller und √ºblicher: Webseiten erstellen. Dazu gibt es eine vielzahl von Optionen:
  - GitHub Pages (ZHAW Internes GitHub)
  - Netlify
  - Posit Connect (ZHAW Internes Posit Connect)
  - QuartoPub
  - Confluence (ZHAW Internes Confluence)

## √úbung HTML ver√∂ffentlichen üõ†Ô∏è

### Netlify Drop

:::{.incremental}
1. √ñffnet die Website [app.netlify.com/drop](https://app.netlify.com/drop) (kein Login n√∂tig)
2. Drag-and-drop *den Ordner* mit dem HTML Outputfile aus der *√úbung Quarto*
3. Wartet bis der Upload fertig ist und im *Deploy log* <span id="complete">Complete</span> angezeigt wird
4. Klick auf <span id="open">Open production deploy</span>
5. Die Website befindet sich auf [irgendwas.netlify.app/*filename.html*](irgendwas.netlify.app)
   - *filename.html* muss noch hinzugef√ºgt werden!
   - dies kann vermieden werden, wenn statt filename.html *index.html* verwendet wird

:::


## √úbung HTML ver√∂ffentlichen üõ†Ô∏è

### Netlify Drop

Diese Methode ist zwar sehr einfach, aber:

:::{.incremental}
- ohne Login ist Ver√∂ffentlichung zeitlich beschr√§nkt <span class="fragment hl">‚Üí mit Login unbeschr√§nkt</span>
- ben√∂tigt drag-and-drop <span class="fragment hl">‚Üí Kommandozeile `quarto publish netlify` </span>
- URL ist wenig ansprechend <span class="fragment hl">‚Üí Mit `CNAME` auf *eigene* Domain (siehe [dxi.ai](https://dxi.ai/))</span>
:::

:::{.notes}

- ZHAW Domain noch nicht m√∂glich
- Take home messag: HTMLs lassen sich √ºber herk√∂mmliche Hosting Plattformen ver√∂fentlichen
:::


## √úbung HTML ver√∂ffentlichen üõ†Ô∏è

### ZHAW Posit Connect


TODO luoe: Posit kurz erl√§utern und √úbung vorstellen
<https://statistik-ide.zhaw.ch/rsconnect/connect/>
Disclaimer: keine Forschungslizenz



# Markdown / Quarto Advanced


## √úbung YAML Header üõ†Ô∏è

TODO lueo

- Output format and format options (html with toc number depth, pdf with TOC)
- Language (english vs. german)
- metadata (title, author, date)

## √úbung Quarto Features üõ†Ô∏è

TODO lueo

- Bilder einpflegen (mit verschiedenen Layouts sowie Captions / Subcaptions)
- Tabellen einpflegen (online Tables generator https://www.tablesgenerator.com/markdown_tables)
- Crossreference
  - Figures: <https://quarto.org/docs/authoring/cross-references.html#figures>
  - Tables: <https://quarto.org/docs/authoring/cross-references.html#tables> 
  - Sections: <https://quarto.org/docs/authoring/cross-references.html#sections>
    - Limitierung: nicht section name, nur nummer
- Literaturverzeichnis <https://quarto.org/docs/authoring/footnotes-and-citations.html> 
- Callout Blocks


- HTML Slides: <https://quarto.org/docs/reference/formats/presentations/revealjs.html>

## Quarto Projects


TODO: 

- von 1 file auf n files
- yaml-header wandert von index.qmd zu _quarto.yml
- index.qmd ist nicht mehr optional


::: columns
::: {.column width="50%"}
- Markdown-Dateien (*.qmd)
- Bilder und Grafiken
- Quarto-Konfigurationsdatei: _quarto.yml
- Zus√§tzliche Ressourcen
:::

::: {.column width="50%"}
![yml File Struktur](images/quarto_project_yml_structure.PNG)
:::
:::

## Warum Quarto Projects?

Vorlagen





# Git(Hub)

## Git(Hub)

**Git**: Verteiltes Versionskontrollsystem f√ºr die Nachverfolgung von √Ñnderungen im Quellcode w√§hrend der Softwareentwicklung. Erm√∂glicht Zusammenarbeit, Verwaltung von Codeversionen und √Ñnderungsverfolgung. Bekannt f√ºr Geschwindigkeit und Effizienz.

--

**GitHub**: Webplattform f√ºr Hosting von Git-Repositories. Bietet Tools f√ºr Zusammenarbeit, Code√ºberpr√ºfung und Projektverwaltung. Beliebt bei Entwicklern zur Teilung, Zusammenarbeit und Beitrag zu Open-Source-Projekten. Enth√§lt Funktionen wie Issues und Pull Requests.

## Plaintext Files & Versioncontrol

TODO

## Git Workflow

::: columns
::: {.column width="50%"}tdflkjd
- Commit: Speichert eine Version mit √Ñnderungen.
- Push: Hochladen von lokalen Commits ins Remote Repository.
- Pull: Abrufen und Einpflegen von √Ñnderungen aus dem Remote Repository.
- Merge Request: Anfrage zur √úberf√ºhrung von √Ñnderungen zwischen Branches.
- Merge Conflict: Problem bei der automatischen Zusammenf√ºhrung von Branches.
- Issue: Verfolgung von Problemen, Vorschl√§gen oder Aufgaben in Projekten.
:::
::: {.column width="50%"}
![Git Workflow](images/git-workflow.PNG)
:::
:::

## √úbung

1. Klonen Sie die √úbungsunterlagen von [Fit-mit-Markdown](https://fit-mit-markdown.github.io/) 
2. Erstellen Sie einen neuen Branch
3. Bearbeiten Sie etwas im Dokument
3. Commiten und Pushen Sie die √Ñnderungen
4. Erstellen Sie einen Merge Request auf GitHub

TODO